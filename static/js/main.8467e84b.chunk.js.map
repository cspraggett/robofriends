{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","actions.js","containers/App.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","robot","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","fetch","then","response","json","data","payload","catch","connect","searchField","searchRobots","isPending","onSearchChange","event","text","target","value","onRequestRobots","useState","count","setCount","useEffect","filteredRobots","filter","toLowerCase","includes","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"4OAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACzB,OACC,sBAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,WACpD,gCACC,6BAAKJ,IACL,4BAAIC,WCWOI,EAfE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,mCACEA,EAAOC,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,CAECT,GAAIS,EAAMT,GACVC,KAAMQ,EAAMR,KACZC,MAAOO,EAAMP,OAHRO,EAAMT,UCMDU,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,qBAAKT,UAAU,MAAf,SACC,uBACCA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCOCI,EAdA,SAACC,GACf,OACC,qBACCC,MAAO,CACNC,SAAU,SACVC,OAAQ,kBACRC,OAAQ,SAJV,SAOEJ,EAAMK,Y,gCCWKC,E,kDAnBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,qDAOnB,SAAkBC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG3B,WACC,OAAIG,KAAKJ,MAAMC,SACP,0DAEDG,KAAKX,MAAMK,a,GAhBOQ,aCFdC,G,MAAsB,uBAEtBC,EAAyB,yBAEzBC,EAAyB,yBAEzBC,EAAwB,wBCMxBC,EAAgB,SAACC,GAC7BA,EAAS,CAAEvB,KAAMmB,IACjBK,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUL,EAAS,CAAEvB,KAAMoB,EAAwBS,QAASD,OACjEE,OAAM,SAACjB,GAAD,OACNU,EAAS,CAAEvB,KAAMqB,EAAuBQ,QAAShB,QCiDrCkB,mBAzDS,SAACpB,GACxB,MAAO,CACNqB,YAAarB,EAAMsB,aAAaD,YAChCtC,OAAQiB,EAAMW,cAAc5B,OAC5BwC,UAAWvB,EAAMW,cAAcY,UAC/BrB,MAAOF,EAAMW,cAAcT,UAIF,SAACU,GAC3B,MAAO,CACNY,eAAgB,SAACC,GAAD,OAAWb,GDdEc,ECcsBD,EAAME,OAAOC,MDdzB,CACxCvC,KAAMkB,EACNW,QAASQ,KAFoB,IAACA,GCe7BG,gBAAiB,kBAAMjB,EAASD,OA6CnBS,EAzCf,SAAa3B,GAAO,MAGOqC,mBAAS,GAHhB,mBAGZC,EAHY,KAGLC,EAHK,KAKXX,EAAmD5B,EAAnD4B,YAAaG,EAAsC/B,EAAtC+B,eAAgBzC,EAAsBU,EAAtBV,OAAQwC,EAAc9B,EAAd8B,UAE7CU,qBAAU,WACTxC,EAAMoC,oBAOJ,IAMH,IAAMK,EAAiBnD,EAAOoD,QAAO,SAAClD,GAAD,OACpCA,EAAMR,KAAK2D,cAAcC,SAAShB,EAAYe,kBAG/C,OAAOb,EACN,yCAEA,sBAAK5C,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,yBACA,wBAAQ2D,QAAS,kBAAMN,EAASD,EAAQ,IAAxC,uBACA,cAAC,EAAD,CAAW3C,aAAcoC,IACzB,cAAC,EAAD,UACC,eAAC,EAAD,WACC,cAAC,EAAD,CAAUzC,OAAQmD,IADnB,eC/CWK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCARO,EAAqB,CAC1B1B,YAAa,IAYR2B,EAAqB,CAC1BzB,WAAW,EACXxC,OAAQ,GACRmB,MAAO,ICVF+C,G,MAASC,0BAETC,EAAcC,YAAgB,CAAE9B,aDJV,WAA8C,IAA7CtB,EAA4C,uDAApC+C,EAAoBM,EAAgB,uDAAP,GACjE,OAAQA,EAAOhE,MACd,KAAKkB,EACJ,OAAO,2BAAKP,GAAZ,IAAmBqB,YAAagC,EAAOnC,UACxC,QACC,OAAOlB,ICD0CW,cDWvB,WAA8C,IAA7CX,EAA4C,uDAApCgD,EAAoBK,EAAgB,uDAAP,GAClE,OAAQA,EAAOhE,MACd,KAAKmB,EACJ,OAAO,2BAAKR,GAAZ,IAAmBuB,WAAW,IAC/B,KAAKd,EACJ,OAAO,2BAAKT,GAAZ,IAAmBjB,OAAQsE,EAAOnC,QAASK,WAAW,IACvD,KAAKb,EACJ,OAAO,2BAAKV,GAAZ,IAAmBE,MAAOmD,EAAOnC,QAASK,WAAW,IACtD,QACC,OAAOvB,MCnBJsD,EAAQC,YACbJ,EACAK,YAAgBC,IAAiBR,IAGlCS,IAASC,OACR,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACC,cAAC,EAAD,MAEDM,SAASC,eAAe,SAMzBtB,M","file":"static/js/main.8467e84b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n\treturn (\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt=\"Robots\" />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from 'react';\n\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<>\n\t\t\t{robots.map((robot) => (\n\t\t\t\t<Card\n\t\t\t\t\tkey={robot.id}\n\t\t\t\t\tid={robot.id}\n\t\t\t\t\tname={robot.name}\n\t\t\t\t\temail={robot.email}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</>\n\t);\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\t\ttype=\"search\"\n\t\t\t\tplaceholder=\"Search Robots\"\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\toverflow: 'scroll',\n\t\t\t\tborder: '5px solid black',\n\t\t\t\theight: '800px',\n\t\t\t}}\n\t\t>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false,\n\t\t};\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true });\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oooops. That is not good</h1>;\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundry;\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED,\n} from './constants';\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text,\n});\n\nexport const requestRobots = (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then((response) => response.json())\n\t\t.then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n\t\t.catch((error) =>\n\t\t\tdispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n\t\t);\n};\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots),\n\t};\n};\n\nfunction App(props) {\n\t// const [robots, setRobots] = useState([]);\n\t// const [searchfield, setSearchfield] = useState('');\n\tconst [count, setCount] = useState(0);\n\n\tconst { searchField, onSearchChange, robots, isPending } = props;\n\n\tuseEffect(() => {\n\t\tprops.onRequestRobots();\n\t\t// fetch('https://jsonplaceholder.typicode.com/users')\n\t\t// \t.then((response) => response.json())\n\t\t// \t.then((users) => {\n\t\t// \t\tsetRobots(users.map(({ id, name, email }) => ({ id, name, email })));\n\t\t// \t})\n\t\t// \t.catch((err) => console.error(err));\n\t}, []);\n\n\t// const onSearchChange = (event) => {\n\t// \tsetSearchfield(event.target.value);\n\t// };\n\n\tconst filteredRobots = robots.filter((robot) =>\n\t\trobot.name.toLowerCase().includes(searchField.toLowerCase())\n\t);\n\n\treturn isPending ? (\n\t\t<h1>Loading</h1>\n\t) : (\n\t\t<div className=\"tc\">\n\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t<button onClick={() => setCount(count + 1)}>Click Me!</button>\n\t\t\t<SearchBox searchChange={onSearchChange} />\n\t\t\t<Scroll>\n\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t<CardList robots={filteredRobots} />;\n\t\t\t\t</ErrorBoundry>\n\t\t\t</Scroll>\n\t\t</div>\n\t);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED,\n} from './constants';\n\nconst initialStateSearch = {\n\tsearchField: '',\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n\tswitch (action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn { ...state, searchField: action.payload };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: '',\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n\tswitch (action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn { ...state, isPending: true };\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn { ...state, robots: action.payload, isPending: false };\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn { ...state, error: action.payload, isPending: false };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n\trootReducer,\n\tapplyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}